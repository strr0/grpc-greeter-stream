// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: proto/hello.proto

package greeter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SayClient is the client API for Say service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SayClient interface {
	Hello(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	LotsRequest(ctx context.Context, opts ...grpc.CallOption) (Say_LotsRequestClient, error)
	LotsResponse(ctx context.Context, in *Request, opts ...grpc.CallOption) (Say_LotsResponseClient, error)
}

type sayClient struct {
	cc grpc.ClientConnInterface
}

func NewSayClient(cc grpc.ClientConnInterface) SayClient {
	return &sayClient{cc}
}

func (c *sayClient) Hello(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Say/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sayClient) LotsRequest(ctx context.Context, opts ...grpc.CallOption) (Say_LotsRequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &Say_ServiceDesc.Streams[0], "/Say/LotsRequest", opts...)
	if err != nil {
		return nil, err
	}
	x := &sayLotsRequestClient{stream}
	return x, nil
}

type Say_LotsRequestClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type sayLotsRequestClient struct {
	grpc.ClientStream
}

func (x *sayLotsRequestClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sayLotsRequestClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sayClient) LotsResponse(ctx context.Context, in *Request, opts ...grpc.CallOption) (Say_LotsResponseClient, error) {
	stream, err := c.cc.NewStream(ctx, &Say_ServiceDesc.Streams[1], "/Say/LotsResponse", opts...)
	if err != nil {
		return nil, err
	}
	x := &sayLotsResponseClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Say_LotsResponseClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type sayLotsResponseClient struct {
	grpc.ClientStream
}

func (x *sayLotsResponseClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SayServer is the server API for Say service.
// All implementations must embed UnimplementedSayServer
// for forward compatibility
type SayServer interface {
	Hello(context.Context, *Request) (*Response, error)
	LotsRequest(Say_LotsRequestServer) error
	LotsResponse(*Request, Say_LotsResponseServer) error
	mustEmbedUnimplementedSayServer()
}

// UnimplementedSayServer must be embedded to have forward compatible implementations.
type UnimplementedSayServer struct {
}

func (UnimplementedSayServer) Hello(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedSayServer) LotsRequest(Say_LotsRequestServer) error {
	return status.Errorf(codes.Unimplemented, "method LotsRequest not implemented")
}
func (UnimplementedSayServer) LotsResponse(*Request, Say_LotsResponseServer) error {
	return status.Errorf(codes.Unimplemented, "method LotsResponse not implemented")
}
func (UnimplementedSayServer) mustEmbedUnimplementedSayServer() {}

// UnsafeSayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SayServer will
// result in compilation errors.
type UnsafeSayServer interface {
	mustEmbedUnimplementedSayServer()
}

func RegisterSayServer(s grpc.ServiceRegistrar, srv SayServer) {
	s.RegisterService(&Say_ServiceDesc, srv)
}

func _Say_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SayServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Say/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SayServer).Hello(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Say_LotsRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SayServer).LotsRequest(&sayLotsRequestServer{stream})
}

type Say_LotsRequestServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type sayLotsRequestServer struct {
	grpc.ServerStream
}

func (x *sayLotsRequestServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sayLotsRequestServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Say_LotsResponse_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SayServer).LotsResponse(m, &sayLotsResponseServer{stream})
}

type Say_LotsResponseServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type sayLotsResponseServer struct {
	grpc.ServerStream
}

func (x *sayLotsResponseServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

// Say_ServiceDesc is the grpc.ServiceDesc for Say service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Say_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Say",
	HandlerType: (*SayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _Say_Hello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LotsRequest",
			Handler:       _Say_LotsRequest_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "LotsResponse",
			Handler:       _Say_LotsResponse_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/hello.proto",
}
